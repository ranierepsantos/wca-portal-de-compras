// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wca.compras.data.DataAccess;

#nullable disable

namespace wca.compras.data.Migrations
{
    [DbContext(typeof(WcaContext))]
    [Migration("20241208192818_AlterTable_Sistemas_AddColumn_Ativo")]
    partial class AlterTable_Sistemas_AddColumn_Ativo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClienteUsuario", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("ClienteId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ClienteUsuario");
                });

            modelBuilder.Entity("FilialUsuario", b =>
                {
                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("FilialId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("FilialUsuario");
                });

            modelBuilder.Entity("PerfilPermissao", b =>
                {
                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.Property<int>("PermissaoId")
                        .HasColumnType("int");

                    b.HasKey("PerfilId", "PermissaoId");

                    b.HasIndex("PermissaoId");

                    b.ToTable("PerfilPermissao");
                });

            modelBuilder.Entity("TipoFornecimentoUsuario", b =>
                {
                    b.Property<int>("TipoFornecimentoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("TipoFornecimentoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TipoFornecimentoUsuario");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Cep")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cidade");

                    b.Property<string>("Endereco")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("endereco");

                    b.Property<int>("FilialId")
                        .HasColumnType("int")
                        .HasColumnName("filial_id");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("inscricao_estadual");

                    b.Property<bool>("NaoUltrapassarLimitePorRequisicao")
                        .HasColumnType("bit")
                        .HasColumnName("nao_ultrapassar_limite_por_requisicao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("numero");

                    b.Property<string>("PeriodoEntrega")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("periodo_entrega");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("uf");

                    b.Property<decimal>("ValorLimiteRequisicao")
                        .HasColumnType("money")
                        .HasColumnName("valor_limite_requisicao");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.ClienteContato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AprovaPedido")
                        .HasColumnType("bit")
                        .HasColumnName("aprova_pedido");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("celular");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClienteContatos");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.ClienteOrcamentoConfiguracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("AprovadoPor")
                        .HasColumnType("tinyint")
                        .HasColumnName("aprovador_por");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<int>("QuantidadeMes")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_mes");

                    b.Property<int>("TipoFornecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipofornecimento_id");

                    b.Property<int>("Tolerancia")
                        .HasColumnType("int")
                        .HasColumnName("tolerancia");

                    b.Property<decimal>("ValorPedido")
                        .HasColumnType("money")
                        .HasColumnName("valor_pedido");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TipoFornecimentoId");

                    b.ToTable("ClienteOrcamentoConfiguracaos");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Configuracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("chave");

                    b.Property<string>("ComboValores")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("combo_valores");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("descricao");

                    b.Property<int>("TipoCampo")
                        .HasMaxLength(500)
                        .HasColumnType("int")
                        .HasColumnName("tipo_campo");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.ToTable("Configuracoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Chave = "requisicao.sendemail.fornecedor",
                            ComboValores = "",
                            Descricao = "Requisição solicitar aprovação fornecedor",
                            TipoCampo = 1,
                            Valor = "false"
                        },
                        new
                        {
                            Id = 2,
                            Chave = "requisicao.datacorte",
                            ComboValores = "[{\"value\":1,\"text\":\"01\"},{\"value\":2,\"text\":\"02\"},{\"value\":3,\"text\":\"03\"},{\"value\":4,\"text\":\"04\"},{\"value\":5,\"text\":\"05\"},{\"value\":6,\"text\":\"06\"},{\"value\":7,\"text\":\"07\"},{\"value\":8,\"text\":\"08\"},{\"value\":9,\"text\":\"09\"},{\"value\":10,\"text\":\"10\"},{\"value\":11,\"text\":\"11\"},{\"value\":12,\"text\":\"12\"},{\"value\":13,\"text\":\"13\"},{\"value\":14,\"text\":\"14\"},{\"value\":15,\"text\":\"15\"},{\"value\":16,\"text\":\"16\"},{\"value\":17,\"text\":\"17\"},{\"value\":18,\"text\":\"18\"},{\"value\":19,\"text\":\"19\"},{\"value\":20,\"text\":\"20\"},{\"value\":21,\"text\":\"21\"},{\"value\":22,\"text\":\"22\"},{\"value\":23,\"text\":\"23\"},{\"value\":24,\"text\":\"24\"},{\"value\":25,\"text\":\"25\"},{\"value\":26,\"text\":\"26\"},{\"value\":27,\"text\":\"27\"},{\"value\":28,\"text\":\"28\"},{\"value\":29,\"text\":\"29\"},{\"value\":30,\"text\":\"30\"},{\"value\":31,\"text\":\"31\"}]",
                            Descricao = "Requisição Data de Corte",
                            TipoCampo = 5,
                            Valor = "1"
                        },
                        new
                        {
                            Id = 3,
                            Chave = "requisicao.sendemail.cliente",
                            ComboValores = "",
                            Descricao = "Requisição - solicitar aprovação do cliente",
                            TipoCampo = 1,
                            Valor = "false"
                        });
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<int>("SistemaId")
                        .HasColumnType("int")
                        .HasColumnName("sistema_id");

                    b.HasKey("Id");

                    b.ToTable("Filiais");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Cep")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cidade");

                    b.Property<string>("Endereco")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("endereco");

                    b.Property<int>("FilialId")
                        .HasColumnType("int")
                        .HasColumnName("filial_id");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("inscricao_estadual");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("numero");

                    b.Property<decimal>("TaxaGestaoMinimaPercentual")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("taxa_gestao_minima_percentual");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("uf");

                    b.Property<decimal>("ValorCompraMinimoSemFrete")
                        .HasColumnType("money")
                        .HasColumnName("valor_compra_minimo_sem_frete");

                    b.Property<decimal>("ValorFrete")
                        .HasColumnType("money")
                        .HasColumnName("valor_frete");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.FornecedorContato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AprovaPedido")
                        .HasColumnType("bit")
                        .HasColumnName("aprova_pedido");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("celular");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("int")
                        .HasColumnName("fornecedor_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorContatos");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome");

                    b.Property<int?>("SistemaId")
                        .HasColumnType("int")
                        .HasColumnName("sistema_id");

                    b.HasKey("Id");

                    b.HasIndex("SistemaId");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Permissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome");

                    b.Property<string>("Regra")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("regra");

                    b.Property<int?>("SistemaId")
                        .HasColumnType("int")
                        .HasColumnName("sistema_id");

                    b.HasKey("Id");

                    b.HasIndex("SistemaId");

                    b.ToTable("Permissao");

                    b.HasData(
                        new
                        {
                            Id = 9,
                            Descricao = "Permite incluir, alterar e inativar recorrência",
                            Nome = "Recorrência",
                            Regra = "recorrencia"
                        },
                        new
                        {
                            Id = 10,
                            Descricao = "Permite alterar e inativar recorrência de outros usuários",
                            Nome = "Administrador Recorrência",
                            Regra = "recorrencias_view_others_users"
                        },
                        new
                        {
                            Id = 11,
                            Descricao = "Permite alterar configurações do sistema",
                            Nome = "Configurações",
                            Regra = "configuracao"
                        },
                        new
                        {
                            Id = 13,
                            Descricao = "Permite incluir e alterar categorias",
                            Nome = "Categorias",
                            Regra = "categoria"
                        });
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codigo");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("int")
                        .HasColumnName("fornecedor_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<decimal>("PercentualIPI")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("percentual_ipi");

                    b.Property<decimal>("TaxaGestao")
                        .HasColumnType("money")
                        .HasColumnName("taxa_gestao");

                    b.Property<int>("TipoFornecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipofornecimento_id");

                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unidade_medida");

                    b.Property<decimal>("Valor")
                        .HasColumnType("money")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("TipoFornecimentoId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.ProdutoIcmsEstado", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnName("produto_id");

                    b.Property<string>("UF")
                        .HasColumnType("varchar(2)")
                        .HasColumnName("uf");

                    b.Property<decimal>("Icms")
                        .HasColumnType("money")
                        .HasColumnName("icms");

                    b.HasKey("ProdutoId", "UF");

                    b.ToTable("Produto_Icms_Estado");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Recorrencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cep")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cidade");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_criacao");

                    b.Property<byte>("Destino")
                        .HasColumnType("tinyint")
                        .HasColumnName("destino");

                    b.Property<int>("Dia")
                        .HasColumnType("int")
                        .HasColumnName("dia");

                    b.Property<string>("Endereco")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("endereco");

                    b.Property<int>("FilialId")
                        .HasColumnType("int")
                        .HasColumnName("filial_id");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("int")
                        .HasColumnName("fornecedor_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("numero");

                    b.Property<string>("PeriodoEntrega")
                        .IsRequired()
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("periodo_entrega");

                    b.Property<int>("TipoRecorrencia")
                        .HasColumnType("int")
                        .HasColumnName("tipo_recorrencia");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("uf");

                    b.Property<string>("UrlOrigin")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("url_origin");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FilialId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Recorrencias");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RecorrenciaLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_hora");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("log");

                    b.Property<int>("RecorrenciaId")
                        .HasColumnType("int")
                        .HasColumnName("recorrencia_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("RecorrenciaId");

                    b.ToTable("RecorrenciaLogs");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RecorrenciaProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codigo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<int>("RecorrenciaId")
                        .HasColumnType("int")
                        .HasColumnName("recorrencia_id");

                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unidade_medida");

                    b.HasKey("Id");

                    b.HasIndex("RecorrenciaId");

                    b.ToTable("RecorrenciaProdutos");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Requisicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cep")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cidade");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataEntrega")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_entrega");

                    b.Property<byte>("Destino")
                        .HasColumnType("tinyint")
                        .HasColumnName("destino");

                    b.Property<string>("Endereco")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("endereco");

                    b.Property<int>("FilialId")
                        .HasColumnType("int")
                        .HasColumnName("filial_id");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("int")
                        .HasColumnName("fornecedor_id");

                    b.Property<string>("NotaFiscal")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nota_fiscal");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("numero");

                    b.Property<string>("PeriodoEntrega")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("periodo_entrega");

                    b.Property<bool>("RequerAutorizacaoCliente")
                        .HasColumnType("bit")
                        .HasColumnName("requer_autorizacao_cliente");

                    b.Property<bool>("RequerAutorizacaoWCA")
                        .HasColumnType("bit")
                        .HasColumnName("requer_autorizacao_wca");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<decimal>("TaxaGestao")
                        .HasColumnType("money")
                        .HasColumnName("taxa_gestao");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("uf");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.Property<decimal>("ValorFrete")
                        .HasColumnType("money")
                        .HasColumnName("valor_frete");

                    b.Property<decimal>("ValorIcms")
                        .HasColumnType("money")
                        .HasColumnName("valor_icms");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("money")
                        .HasColumnName("valor_total");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FilialId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Requisicoes");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RequisicaoAprovacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AlteraStatus")
                        .HasColumnType("bit")
                        .HasColumnName("altera_status");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_expiracao");

                    b.Property<DateTime?>("DataRevogacao")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_revogacao");

                    b.Property<string>("NomeAprovador")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome_aprovador");

                    b.Property<int>("RequisicaoId")
                        .HasColumnType("int")
                        .HasColumnName("requisicao_id");

                    b.Property<int>("TipoAprovador")
                        .HasColumnType("int")
                        .HasColumnName("tipoAprovador");

                    b.Property<string>("TokenAprovador")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("token_aprovador");

                    b.Property<string>("TokenRequisicao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.HasIndex("RequisicaoId");

                    b.ToTable("RequisicaoAprovacoes");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RequisicaoHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_hora");

                    b.Property<string>("Evento")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("evento");

                    b.Property<int>("RequisicaoId")
                        .HasColumnType("int")
                        .HasColumnName("requisicao_id");

                    b.HasKey("Id");

                    b.HasIndex("RequisicaoId");

                    b.ToTable("RequisicaoHistoricos");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RequisicaoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codigo");

                    b.Property<decimal>("Icms")
                        .HasColumnType("money")
                        .HasColumnName("icms");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<decimal>("PercentualIPI")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("percentual_ipi");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<int>("RequisicaoId")
                        .HasColumnType("int")
                        .HasColumnName("requisicao_id");

                    b.Property<decimal>("TaxaGestao")
                        .HasColumnType("money")
                        .HasColumnName("taxa_gestao");

                    b.Property<int>("TipoFornecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipofornecimento_id");

                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unidade_medida");

                    b.Property<decimal>("Valor")
                        .HasColumnType("money")
                        .HasColumnName("valor");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("money")
                        .HasColumnName("valor_total");

                    b.HasKey("Id");

                    b.HasIndex("RequisicaoId");

                    b.HasIndex("TipoFornecimentoId");

                    b.ToTable("RequisicaoItens");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.ResetPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_expiracao");

                    b.Property<DateTime?>("DataRevogacao")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data_revogacao");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("token");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ResetPassword");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Sistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descricao");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("icon");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("Sistemas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Descricao = "Sistema de compras de insumos",
                            Icon = "",
                            Nome = "Compras"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Descricao = "Sistema de solicitação de reembolso",
                            Icon = "",
                            Nome = "Reembolso"
                        });
                });

            modelBuilder.Entity("wca.compras.domain.Entities.TipoFornecimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("TipoFornecimento");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("celular");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.UsuarioConfiguracoes", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.Property<int>("SistemaId")
                        .HasColumnType("int")
                        .HasColumnName("sistema_id");

                    b.Property<bool>("NotificarPorChatBot")
                        .HasColumnType("bit")
                        .HasColumnName("notificar_por_chatbot");

                    b.Property<bool>("NotificarPorEmail")
                        .HasColumnType("bit")
                        .HasColumnName("notificar_por_email");

                    b.HasKey("UsuarioId", "SistemaId");

                    b.HasIndex("SistemaId");

                    b.ToTable("UsuarioConfiguracoes");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.UsuarioReembolsoComplemento", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.Property<string>("Cargo")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cargo");

                    b.Property<int?>("CentroCustoId")
                        .HasColumnType("int")
                        .HasColumnName("centrocusto_id");

                    b.Property<int?>("GestorId")
                        .HasColumnType("int")
                        .HasColumnName("gestor_id");

                    b.HasKey("UsuarioId");

                    b.HasIndex("GestorId");

                    b.ToTable("UsuarioReembolsoComplemento");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.UsuarioSistemaPerfil", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.Property<int>("SistemaId")
                        .HasColumnType("int")
                        .HasColumnName("sistema_id");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_id");

                    b.HasKey("UsuarioId", "SistemaId", "PerfilId");

                    b.HasIndex("PerfilId");

                    b.HasIndex("SistemaId");

                    b.ToTable("Usuario_Sistema_Perfil");
                });

            modelBuilder.Entity("ClienteUsuario", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Cliente", null)
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilialUsuario", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Filial", null)
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PerfilPermissao", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Perfil", null)
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Permissao", null)
                        .WithMany()
                        .HasForeignKey("PermissaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TipoFornecimentoUsuario", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.TipoFornecimento", null)
                        .WithMany()
                        .HasForeignKey("TipoFornecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Cliente", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Filial", "Filial")
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.ClienteContato", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Cliente", "Cliente")
                        .WithMany("ClienteContatos")
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.ClienteOrcamentoConfiguracao", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Cliente", "Cliente")
                        .WithMany("ClienteOrcamentoConfiguracao")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.TipoFornecimento", "TipoFornecimento")
                        .WithMany()
                        .HasForeignKey("TipoFornecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("TipoFornecimento");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Fornecedor", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Filial", "Filial")
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.FornecedorContato", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorContatos")
                        .HasForeignKey("FornecedorId");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Perfil", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Sistema", "Sistema")
                        .WithMany()
                        .HasForeignKey("SistemaId");

                    b.Navigation("Sistema");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Permissao", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Sistema", "Sistema")
                        .WithMany()
                        .HasForeignKey("SistemaId");

                    b.Navigation("Sistema");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Produto", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorId");

                    b.HasOne("wca.compras.domain.Entities.TipoFornecimento", "TipoFornecimento")
                        .WithMany()
                        .HasForeignKey("TipoFornecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("TipoFornecimento");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.ProdutoIcmsEstado", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Produto", null)
                        .WithMany("ProdutoIcmsEstado")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Recorrencia", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Filial", "Filial")
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Filial");

                    b.Navigation("Fornecedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RecorrenciaLog", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Recorrencia", "Recorrencia")
                        .WithMany("RecorrenciaLogs")
                        .HasForeignKey("RecorrenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recorrencia");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RecorrenciaProduto", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Recorrencia", "Recorrencia")
                        .WithMany("RecorrenciaProdutos")
                        .HasForeignKey("RecorrenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recorrencia");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Requisicao", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("wca.compras.domain.Entities.Filial", "Filial")
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.HasOne("wca.compras.domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Cliente");

                    b.Navigation("Filial");

                    b.Navigation("Fornecedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RequisicaoAprovacao", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Requisicao", "Requisicao")
                        .WithMany()
                        .HasForeignKey("RequisicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisicao");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RequisicaoHistorico", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Requisicao", null)
                        .WithMany("RequisicaoHistorico")
                        .HasForeignKey("RequisicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wca.compras.domain.Entities.RequisicaoItem", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Requisicao", null)
                        .WithMany("RequisicaoItens")
                        .HasForeignKey("RequisicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.TipoFornecimento", "TipoFornecimento")
                        .WithMany()
                        .HasForeignKey("TipoFornecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoFornecimento");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.ResetPassword", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Usuario", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.UsuarioConfiguracoes", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Sistema", "Sistema")
                        .WithMany()
                        .HasForeignKey("SistemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioConfiguracoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sistema");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.UsuarioReembolsoComplemento", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Usuario", "Gestor")
                        .WithMany()
                        .HasForeignKey("GestorId");

                    b.HasOne("wca.compras.domain.Entities.Usuario", "Usuario")
                        .WithOne("UsuarioReembolsoComplemento")
                        .HasForeignKey("wca.compras.domain.Entities.UsuarioReembolsoComplemento", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gestor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.UsuarioSistemaPerfil", b =>
                {
                    b.HasOne("wca.compras.domain.Entities.Perfil", "Perfil")
                        .WithMany("UsuarioSistemaPerfil")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Sistema", "Sistema")
                        .WithMany("UsuarioSistemaPerfil")
                        .HasForeignKey("SistemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wca.compras.domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioSistemaPerfil")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Sistema");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Cliente", b =>
                {
                    b.Navigation("ClienteContatos");

                    b.Navigation("ClienteOrcamentoConfiguracao");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Fornecedor", b =>
                {
                    b.Navigation("FornecedorContatos");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Perfil", b =>
                {
                    b.Navigation("UsuarioSistemaPerfil");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Produto", b =>
                {
                    b.Navigation("ProdutoIcmsEstado");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Recorrencia", b =>
                {
                    b.Navigation("RecorrenciaLogs");

                    b.Navigation("RecorrenciaProdutos");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Requisicao", b =>
                {
                    b.Navigation("RequisicaoHistorico");

                    b.Navigation("RequisicaoItens");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Sistema", b =>
                {
                    b.Navigation("UsuarioSistemaPerfil");
                });

            modelBuilder.Entity("wca.compras.domain.Entities.Usuario", b =>
                {
                    b.Navigation("UsuarioConfiguracoes");

                    b.Navigation("UsuarioReembolsoComplemento");

                    b.Navigation("UsuarioSistemaPerfil");
                });
#pragma warning restore 612, 618
        }
    }
}
